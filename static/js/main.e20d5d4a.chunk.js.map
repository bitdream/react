{"version":3,"sources":["logo.svg","serviceWorker.js","Calculator.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","Led","params","style","height","margin","fontSize","fontStyle","textAlign","result","HistoryLed","Number","pros","type","width","onClick","fun","num","Calculator","state","leftOperand","rightOperand","currentNumberString","currentOperation","newNumber","calc","bind","param","value","this","setState","includes","startsWith","substr","length","parseFloat","leftValue","rightValue","console","log","processReturn","processOperator","processNumber","processEqual","buttons","data","i","push","key","border","React","Component","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e20d5d4a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\n\r\nfunction Led(params) {\r\n    let historyStyle = {\r\n        // width:\"90vmin\",\r\n        // height:\"15vmin\",\r\n        height:\"7.5vmin\",\r\n        margin:\"5vmin\",\r\n        fontSize:\"2em\",\r\n        fontStyle:\"bold\",\r\n        textAlign:\"right\"\r\n        // border:\"solid lightgrey 1px\"\r\n\r\n    }\r\n    return (<div style = {historyStyle}> {params.result} </div>);\r\n}\r\n\r\nfunction HistoryLed(params) {\r\n    let historyStyle = {\r\n        // height:\"5vmin\",\r\n        height:\"2.5vmin\",\r\n        margin:\"5vmin\",\r\n        textAlign:\"right\"\r\n\r\n    }\r\n    return (<div style = {historyStyle}> {params.result} </div>);\r\n}\r\n\r\nfunction Number(pros) {\r\n    let buttonStyle= {\r\n        // width:\"20vmin\",\r\n        // height:\"20vmin\",\r\n        width:\"9vmin\",\r\n        height:\"9vmin\",\r\n        margin:\"1vmin\",\r\n        fontSize:\"1.2em\"\r\n    };\r\n    return(            <button type=\"button\" \r\n    style={buttonStyle} \r\n    onClick={pros.fun} >\r\n        {pros.num}\r\n    </button>);\r\n}\r\nclass Calculator extends React.Component {\r\n    constructor(pros) {\r\n        super(pros);\r\n\r\n        this.state = {\r\n            leftOperand:0,\r\n            rightOperand:0,\r\n            currentNumberString:\"0\",\r\n            currentOperation:0,\r\n            newNumber:true\r\n        };\r\n\r\n        this.calc = this.calc.bind(this);\r\n\r\n    }\r\n\r\n    processNumber(param) {\r\n        switch (param) {\r\n            case \"0\": case \"1\": case \"2\": case \"3\":case \"4\": case \"5\": case \"6\": case \"7\":case \"8\": case \"9\":  {\r\n            let value = this.state.currentNumberString;\r\n            if (this.state.newNumber || value === \"0\") {\r\n                value = param;\r\n            } else {\r\n                // value = parseFloat(param) + value * 10;\r\n                value = value + param;\r\n            }\r\n            this.setState({\r\n                currentNumberString:value,\r\n                newNumber:false\r\n            });\r\n        }\r\n                break;  \r\n\r\n            case \".\": {\r\n                let value = this.state.currentNumberString;\r\n                if (!value.includes(\".\")) {\r\n                    value = value + param;\r\n                    this.setState({\r\n                        currentNumberString:value,\r\n                        newNumber:false\r\n                    });\r\n                }\r\n            }\r\n                break;\r\n\r\n                case \"+/-\": {\r\n                    let value = this.state.currentNumberString;\r\n                    if (value.startsWith(\"-\")) {\r\n                        value = value.substr(1, value.length);\r\n                    } else {\r\n                        value = \"-\"+value;\r\n                    }\r\n                    this.setState({\r\n                        currentNumberString:value,\r\n                        newNumber:false\r\n                    });\r\n                }\r\n\r\n                break;\r\n            default:\r\n        }\r\n\r\n    }\r\n\r\n    processOperator(param) {\r\n\r\n        if (this.state.currentOperation === 0) {\r\n\r\n            this.setState({\r\n                currentOperation:param,\r\n                // currentNumberString:\"0\",\r\n                leftOperand:parseFloat(this.state.currentNumberString),\r\n                newNumber:true\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n    processEqual() {\r\n        let leftValue = this.state.leftOperand;\r\n        let rightValue = parseFloat(this.state.currentNumberString);\r\n        let result = 0;\r\n        console.log(\"processEqual:\"+leftValue+\",\"+rightValue);\r\n        switch (this.state.currentOperation) {\r\n            case \"+\": \r\n                result = leftValue + rightValue;\r\n            \r\n            break;\r\n\r\n            case \"-\": \r\n                result = leftValue - rightValue;\r\n\r\n            \r\n            break;\r\n\r\n            case \"*\": \r\n                result = leftValue * rightValue;\r\n\r\n            \r\n            break;\r\n\r\n            case \"/\": \r\n                result = leftValue / rightValue;\r\n\r\n            \r\n            break;\r\n                default:\r\n        }\r\n\r\n        this.setState({\r\n            currentNumberString:\"\"+result,\r\n            currentOperation:0,\r\n            newNumber:true\r\n        });\r\n    }\r\n\r\n    processReturn(param) {\r\n        switch(param) {\r\n            case \"<-\":\r\n                if (this.state.currentNumberString.length > 0) {\r\n                    this.setState({\r\n                        currentNumberString:this.state.currentNumberString.substr(0, this.state.currentNumberString.length-1)\r\n                    });\r\n                }\r\n                break;\r\n\r\n                case \"CE\":\r\n                    this.setState({\r\n                            currentNumberString:\"0\"\r\n                    });\r\n                    \r\n                    break;\r\n                case \"C\":\r\n                        this.setState({\r\n                                currentNumberString:\"0\",\r\n                                currentOperation:0,\r\n                                newNumber:true\r\n                        });\r\n                        \r\n                        break;                    \r\n            default:\r\n        }\r\n    }\r\n\r\n    calc (params) {\r\n        console.log(\"calc:\"+params);\r\n        switch (params) {\r\n            case \"CE\": case \"C\":case \"<-\":\r\n                this.processReturn(params);\r\n                break;\r\n            case \"+\": case \"-\": case \"*\": case \"/\":\r\n                this.processOperator(params);\r\n                break;\r\n            case \"0\": case \"1\": case \"2\": case \"3\":case \"4\": case \"5\": case \"6\": case \"7\":case \"8\": case \"9\": case \"+/-\": case \".\": \r\n                this.processNumber(params);\r\n                break;       \r\n            case \"=\":\r\n                this.processEqual();\r\n                break;                                                                             \r\n            default:\r\n\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        let frameStyle = {\r\n            // width:\"90vmin\",\r\n            width:\"45vmin\",\r\n            margin:\"2vmin\",\r\n            border:\"solid  1vmin  black\"\r\n        }\r\n\r\n        let displayFrameStyle = {\r\n            margin:\"2vmin\",\r\n            border:\"solid  1vmin  grey\"\r\n        }\r\n\r\n        let commentStyle = {\r\n            fontStyle:\"italic\",\r\n            textAlign:\"left\",\r\n            fontSize:\"1.2em\",\r\n            margin:\"2vmin\",\r\n            // border:\"solid black 1px\"\r\n        }\r\n        const buttons = [\"CE\",\"C\",\"<-\",\"/\",\"7\",\"8\",\"9\",\"*\",\"4\",\"5\",\"6\",\"-\",\"1\",\"2\",\"3\",\"+\",\"+/-\",\"0\",\".\",\"=\"];\r\n        var data = [];\r\n        for (let i = 0; i < buttons.length; ++i) {\r\n            data.push(<Number num={buttons[i]} key={i} fun={()=>{this.calc(buttons[i])}}/>);\r\n            if (i % 4 === 3) {\r\n                data.push(<br/>);\r\n            }\r\n        }\r\n\r\n        \r\n        return (\r\n<div>\r\n            <div style={frameStyle}>\r\n\r\n<div style={displayFrameStyle} >\r\n                <HistoryLed result={this.state.currentOperation === 0 ? \" \": \"\"+this.state.leftOperand+this.state.currentOperation} />\r\n                <Led result={this.state.currentNumberString} />\r\n                </div>\r\n                {data}\r\n\r\n\r\n            </div>\r\n\r\n<div style={commentStyle}> React Calculator Demo by Ben </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Calculator;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link} from 'react-router-dom'\r\n  import Calculator from './Calculator.js'\r\n\r\n\r\nReactDOM.render(\r\n  // <React.StrictMode>\r\n  //   <Router>\r\n  //     <Route path=\"/\" componet={App} />\r\n  //   </Router>\r\n  // </React.StrictMode>,\r\n\r\n  <React.StrictMode>\r\n    <Calculator />\r\n</React.StrictMode>,\r\n\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}